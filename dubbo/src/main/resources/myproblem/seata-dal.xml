<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations" value="classpath:jdbc.properties"/>
    </bean>

    <!-- datasource config -->
    <bean id="abstractDataSource" abstract="true"
          class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.initialPoolSize}"/>
        <property name="minIdle" value="${jdbc.minPoolSize}"/>
        <property name="maxActive" value="${jdbc.maxPoolSize}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.idleConnectionTestPeriod}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.maxIdleTime}"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat,log4j"/>
        <property name="timeBetweenLogStatsMillis" value="60000"/>
        <property name="connectionProperties"
                  value="druid.stat.logSlowSql=true;druid.stat.slowSqlMillis=500;druid.stat.mergeSql=true"/>
    </bean>

    <!-- scm DataSource/SessionFactory/Session -->
    <bean id="scmDataSourceInternal" parent="abstractDataSource">
        <property name="url" value="${scm.jdbc.url}"/>
        <property name="username" value="${scm.jdbc.username}"/>
        <property name="password" value="${scm.jdbc.password}"/>
    </bean>
    <bean id="scmDataSource" class="io.seata.rm.datasource.DataSourceProxy">
        <constructor-arg ref="scmDataSourceInternal" />
    </bean>

    <bean id="scmSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="mapperLocations">
            <list>
                <value>classpath:myproblem/sqlmap/*.xml</value>
            </list>
        </property>
        <property name="dataSource" ref="scmDataSource"/>
    </bean>
    <bean id="scmSqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="scmSqlSessionFactory"/>
    </bean>

    <!-- for seata -->
    <bean class="io.seata.spring.annotation.GlobalTransactionScanner">
        <constructor-arg value="bh_scm"/>
        <constructor-arg value="htw_hm_group"/>
    </bean>

    <bean id="scmDtxDao" class="io.seata.samples.dubbo.myproblem.ScmDtxDaoImpl">
        <property name="scmSqlSession" ref="scmSqlSession" />
    </bean>

    <bean id="dtxRemoteService" class="io.seata.samples.dubbo.myproblem.ScmDtxRemoteService">
        <property name="scmDtxDao" ref="scmDtxDao" />
    </bean>
</beans>